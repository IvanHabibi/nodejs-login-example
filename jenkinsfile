pipeline {
    node() 
  environment {
      APPLICATION_NAME = 'halo-login-poc'
      GIT_REPO="https://gitlab.com/ivanhabi2/halo_gais.git"
      GIT_BRANCH="master"
      STAGE_TAG = "promoteToQA"
      DEV_PROJECT = "ocbc-cdct"
      CLUSTER_NAME = "api-ocbcnisp-demo9936-rht-labs-xyz:6443"
      STAGE_PROJECT = "stage"
      TEMPLATE_NAME = "halo-login-poc"
      ARTIFACT_FOLDER = "target"
      PORT = 3000;
  }
  stages{
      stage('Deploy to DEV') {
          when {
              expression {
                  openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                          return !openshift.selector('dc', "${TEMPLATE_NAME}").exists()
                      }
                  }
              }
          }
          steps {
              script {
                  openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                          def app = openshift.newApp("${TEMPLATE_NAME}:latest")
                          app.narrow("svc").expose("--port=${PORT}");
                          def dc = openshift.selector("dc", "${TEMPLATE_NAME}")
                          while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                              sleep 10
                          }
                      }
                  }
              }
          }
      }
    }
  }




          node() {
          stage('deploy') {
                      when {
              expression {
                  openshift.withCluster() {
                      openshift.withProject("ocbc-cdct") {
                          return !openshift.selector('dc', "halo-login-poc").exists()
                      }
                  }
              }
          }
          steps {
              script {
                  openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                          def app = openshift.newApp("halo-login-poc:latest")
                          app.narrow("svc").expose("--port=3000");
                          def dc = openshift.selector("dc", "halo-login-poc")
                          while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                              sleep 10
                          }
                      }
                  }
              }
          }
          }
        }


oc login 

